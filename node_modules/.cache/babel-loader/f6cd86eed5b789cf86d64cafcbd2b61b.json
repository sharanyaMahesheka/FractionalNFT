{"ast":null,"code":"export const GetIpfsUrlFromPinata = pinataUrl => {\n  console.log(\"TEST\");\n  console.log(pinataUrl); // if(IPFSUrl == undefined){\n  //     return ;\n  // }\n\n  try {\n    var IPFSUrl = pinataUrl.split(\"/\");\n    const lastIndex = IPFSUrl.length;\n    IPFSUrl = \"https://ipfs.moralis.io:2053/ipfs/\" + IPFSUrl[lastIndex - 1];\n  } catch (e) {\n    console.log(e);\n  }\n\n  return IPFSUrl;\n};\n_c = GetIpfsUrlFromPinata;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetIpfsUrlFromPinata\");","map":{"version":3,"names":["GetIpfsUrlFromPinata","pinataUrl","console","log","IPFSUrl","split","lastIndex","length","e"],"sources":["/Users/sharanya.mahesheka/Documents/new/FractionalNFT/src/utils.js"],"sourcesContent":["\n\nexport const GetIpfsUrlFromPinata = (pinataUrl) => {\n    console.log(\"TEST\");\n    console.log(pinataUrl);\n    // if(IPFSUrl == undefined){\n    //     return ;\n    // }\n    try{\n        var IPFSUrl = pinataUrl.split(\"/\");\n        const lastIndex = IPFSUrl.length;\n        IPFSUrl = \"https://ipfs.moralis.io:2053/ipfs/\"+IPFSUrl[lastIndex-1];\n    } \n    catch(e) {\n        console.log(e);\n    }  \n    return IPFSUrl;\n};"],"mappings":"AAEA,OAAO,MAAMA,oBAAoB,GAAIC,SAAD,IAAe;EAC/CC,OAAO,CAACC,GAAR,CAAY,MAAZ;EACAD,OAAO,CAACC,GAAR,CAAYF,SAAZ,EAF+C,CAG/C;EACA;EACA;;EACA,IAAG;IACC,IAAIG,OAAO,GAAGH,SAAS,CAACI,KAAV,CAAgB,GAAhB,CAAd;IACA,MAAMC,SAAS,GAAGF,OAAO,CAACG,MAA1B;IACAH,OAAO,GAAG,uCAAqCA,OAAO,CAACE,SAAS,GAAC,CAAX,CAAtD;EACH,CAJD,CAKA,OAAME,CAAN,EAAS;IACLN,OAAO,CAACC,GAAR,CAAYK,CAAZ;EACH;;EACD,OAAOJ,OAAP;AACH,CAfM;KAAMJ,oB"},"metadata":{},"sourceType":"module"}