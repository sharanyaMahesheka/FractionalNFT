{"ast":null,"code":"var _jsxFileName = \"/Users/sharanya.mahesheka/Documents/new/FractionalNFT/src/components/Marketplace.js\",\n    _s = $RefreshSig$();\n\nimport Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Marketplace() {\n  _s();\n\n  const sampleData = [// {\n    //     \"name\": \"NFT#1\",\n    //     \"description\": \"Alchemy's First NFT\",\n    //     \"website\":\"http://axieinfinity.io\",\n    //     \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n    //     \"price\":\"0.03ETH\",\n    //     \"currentlySelling\":\"True\",\n    //     \"address\":\"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\",\n    // },\n    // {\n    //     \"name\": \"NFT#2\",\n    //     \"description\": \"Alchemy's Second NFT\",\n    //     \"website\":\"http://axieinfinity.io\",\n    //     \"image\":\"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\n    //     \"price\":\"0.03ETH\",\n    //     \"currentlySelling\":\"True\",\n    //     \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\n    // },\n    // {\n    //     \"name\": \"NFT#3\",\n    //     \"description\": \"Alchemy's Third NFT\",\n    //     \"website\":\"http://axieinfinity.io\",\n    //     \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n    //     \"price\":\"0.03ETH\",\n    //     \"currentlySelling\":\"True\",\n    //     \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\n    // },\n  ];\n  const [data, updateData] = useState(sampleData);\n  const [dataFetched, updateFetched] = useState(false);\n\n  async function getAllNFTs() {\n    const ethers = require(\"ethers\"); //After adding your Hardhat network to your metamask, this code will get providers and signers\n\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner(); //Pull the deployed contract instance\n\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer); //create an NFT Token\n\n    let transaction = await contract.getAllNFTs();\n    console.log(\"TESTNG\");\n    console.log(transaction); //Fetch all the details of every NFT from the contract and display\n\n    const items = await Promise.all(transaction.map(async i => {\n      var tokenURI = await contract.tokenURI(i.tokenId);\n      console.log(\"token id \", i);\n      console.log(\"getting this tokenUri\", tokenURI);\n\n      try {\n        tokenURI = GetIpfsUrlFromPinata(tokenURI);\n      } catch (e) {\n        console.log(e);\n      }\n\n      let meta = await axios.get(tokenURI);\n      meta = meta.data;\n      let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n      let item = {\n        price,\n        tokenId: i.tokenId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: meta.image,\n        name: meta.name,\n        description: meta.description,\n        fractionalise: i.fractionalise,\n        fractionalisePrice: i.fnftPrice.toNumber(),\n        fractionaliseQty: i.amount.toNumber()\n      };\n      return item;\n    }));\n    updateFetched(true);\n    updateData(items);\n  }\n\n  if (!dataFetched) getAllNFTs();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col place-items-center mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:text-xl font-bold text-white\",\n        children: \"Top NFTs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\",\n        children: data.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(NFTTile, {\n            data: value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 28\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Marketplace, \"eoOZIC3fpxTnVeH+5XYnEv0RFm0=\");\n\n_c = Marketplace;\n\nvar _c;\n\n$RefreshReg$(_c, \"Marketplace\");","map":{"version":3,"names":["Navbar","NFTTile","MarketplaceJSON","axios","useState","GetIpfsUrlFromPinata","Marketplace","sampleData","data","updateData","dataFetched","updateFetched","getAllNFTs","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","address","abi","transaction","console","log","items","Promise","all","map","i","tokenURI","tokenId","e","meta","get","price","utils","formatUnits","toString","item","toNumber","seller","owner","image","name","description","fractionalise","fractionalisePrice","fnftPrice","fractionaliseQty","amount","value","index"],"sources":["/Users/sharanya.mahesheka/Documents/new/FractionalNFT/src/components/Marketplace.js"],"sourcesContent":["import Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\n\nexport default function Marketplace() {\nconst sampleData = [\n    // {\n    //     \"name\": \"NFT#1\",\n    //     \"description\": \"Alchemy's First NFT\",\n    //     \"website\":\"http://axieinfinity.io\",\n    //     \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n    //     \"price\":\"0.03ETH\",\n    //     \"currentlySelling\":\"True\",\n    //     \"address\":\"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\",\n    // },\n    // {\n    //     \"name\": \"NFT#2\",\n    //     \"description\": \"Alchemy's Second NFT\",\n    //     \"website\":\"http://axieinfinity.io\",\n    //     \"image\":\"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\n    //     \"price\":\"0.03ETH\",\n    //     \"currentlySelling\":\"True\",\n    //     \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\n    // },\n    // {\n    //     \"name\": \"NFT#3\",\n    //     \"description\": \"Alchemy's Third NFT\",\n    //     \"website\":\"http://axieinfinity.io\",\n    //     \"image\":\"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n    //     \"price\":\"0.03ETH\",\n    //     \"currentlySelling\":\"True\",\n    //     \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\n    // },\n];\nconst [data, updateData] = useState(sampleData);\nconst [dataFetched, updateFetched] = useState(false);\n\nasync function getAllNFTs() {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n    //create an NFT Token\n    let transaction = await contract.getAllNFTs()\n    console.log(\"TESTNG\");\n    console.log(transaction);\n    //Fetch all the details of every NFT from the contract and display\n    const items = await Promise.all(transaction.map(async i => {\n        var tokenURI = await contract.tokenURI(i.tokenId);\n        console.log(\"token id \", i);\n        console.log(\"getting this tokenUri\", tokenURI);\n        try{\n            tokenURI = GetIpfsUrlFromPinata(tokenURI);\n        } \n        catch(e) {\n            console.log(e);\n        }\n        \n        let meta = await axios.get(tokenURI);\n        meta = meta.data;\n\n        let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n        let item = {\n            price,\n            tokenId: i.tokenId.toNumber(),\n            seller: i.seller,\n            owner: i.owner,\n            image: meta.image,\n            name: meta.name,\n            description: meta.description,\n            fractionalise: i.fractionalise,\n            fractionalisePrice: i.fnftPrice.toNumber(),\n            fractionaliseQty: i.amount.toNumber(),\n        }\n        return item;\n    }))\n\n    updateFetched(true);\n    updateData(items);\n}\n\nif(!dataFetched)\n    getAllNFTs();\n\nreturn (\n    <div>\n        <Navbar></Navbar>\n        <div className=\"flex flex-col place-items-center mt-20\">\n            <div className=\"md:text-xl font-bold text-white\">\n                Top NFTs\n            </div>\n            <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\n                {data.map((value, index) => {\n                    return <NFTTile data={value} key={index}></NFTTile>;\n                })}\n            </div>\n        </div>            \n    </div>\n);\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}