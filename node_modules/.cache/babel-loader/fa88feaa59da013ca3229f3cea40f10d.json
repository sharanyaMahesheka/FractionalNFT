{"ast":null,"code":"var _jsxFileName = \"/Users/sharanya.mahesheka/Documents/new/FractionalNFT/src/components/NFTpage.js\",\n    _s = $RefreshSig$();\n\nimport Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NFTPage(props) {\n  _s();\n\n  const [data, updateData] = useState({});\n  const [dataFetched, updateDataFetched] = useState(false);\n  const [message, updateMessage] = useState(\"\");\n  const [currAddress, updateCurrAddress] = useState(\"0x\");\n\n  async function getNFTData(tokenId) {\n    const ethers = require(\"ethers\"); //After adding your Hardhat network to your metamask, this code will get providers and signers\n\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress(); //Pull the deployed contract instance\n\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer); //create an NFT Token\n\n    var tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n    tokenURI = GetIpfsUrlFromPinata(tokenURI);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(\"LISTED TOKEN\");\n    console.log(listedToken);\n    let item = {\n      price: meta.price,\n      tokenId: tokenId,\n      seller: listedToken.seller,\n      owner: listedToken.owner,\n      image: meta.image,\n      name: meta.name,\n      description: meta.description,\n      fractionalise: listedToken.fractionalise,\n      fractionalisePrice: listedToken.fnftPrice.toNumber(),\n      fractionaliseQty: listedToken.amount.toNumber()\n    };\n    console.log(item);\n    updateData(item);\n    updateDataFetched(true);\n    console.log(\"address\", addr);\n    updateCurrAddress(addr);\n  }\n\n  async function disableButton(btnName) {\n    const listButton = document.getElementById(btnName);\n    listButton.disabled = true;\n    listButton.style.backgroundColor = \"grey\";\n    listButton.style.opacity = 0.3;\n  }\n\n  async function enableButton(btnName) {\n    const listButton = document.getElementById(btnName);\n    listButton.disabled = false;\n    listButton.style.backgroundColor = \"#A500FF\";\n    listButton.style.opacity = 1;\n  }\n\n  async function getFractionaliseContract() {\n    const ethers = require(\"ethers\"); //After adding your Hardhat network to your metamask, this code will get providers and signers\n\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner(); //Pull the deployed contract instance\n\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n    return contract;\n  }\n\n  async function buyNFT(tokenId) {\n    if (data.fractionalise) {\n      const ethers = require(\"ethers\");\n\n      const amtToSell = document.querySelector(\"#amtToSell\").value;\n\n      if (!amtToSell) {\n        alert(\"Please fill all the fields!\");\n        return -1;\n      }\n\n      if (amtToSell > data.fractionaliseQty) {\n        alert(\"Buy amount can't be more than the quantity\");\n        return -1;\n      }\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n      updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\");\n      const salePrice = ethers.utils.parseUnits(\"0.01\", 'ether'); //run the executeSale function\n\n      try {\n        disableButton(\"buy-btn\");\n        let transaction = await contract.nftSell(tokenId, amtToSell, {\n          value: salePrice\n        });\n        await transaction.wait();\n        alert('You successfully bought the NFT!');\n      } catch (error) {\n        alert(error);\n      }\n\n      enableButton(\"buy-btn\");\n      updateMessage(\"\");\n      window.location.reload(false);\n    } else {\n      try {\n        const ethers = require(\"ethers\"); //After adding your Hardhat network to your metamask, this code will get providers and signers\n\n\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner(); //Pull the deployed contract instance\n\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n        const salePrice = ethers.utils.parseUnits(data.price, 'ether');\n        updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\"); //run the executeSale function\n\n        let transaction = await contract.executeSale(tokenId, {\n          value: salePrice\n        });\n        await transaction.wait();\n        alert('You successfully bought the NFT!');\n        updateMessage(\"\");\n        window.location.reload(false);\n      } catch (e) {\n        alert(\"Upload Error\" + e);\n      }\n    }\n  }\n\n  async function fraction(tokenId) {\n    const contract1 = await getFractionaliseContract();\n    const count = document.querySelector(\"#count\").value;\n    const price = document.querySelector(\"#price\").value;\n\n    if (!count || !price) {\n      updateMessage(\"Please fill all the fields!\");\n      return -1;\n    }\n\n    updateMessage(\"Fractionalising the NFT... Please Wait (Upto 5 mins)\");\n    disableButton(\"frac-btn\");\n\n    try {\n      var test = await contract1.fractionalise(tokenId, count, price);\n      await test.wait();\n      alert('You successfully fractionalised the NFT!');\n    } catch (error) {\n      alert(error);\n    }\n\n    updateMessage(\"\");\n    enableButton(\"frac-btn\");\n    window.location.reload(false);\n  }\n\n  const params = useParams();\n  const tokenId = params.tokenId;\n  if (!dataFetched) getNFTData(tokenId);\n  if (typeof data.image == \"string\") data.image = GetIpfsUrlFromPinata(data.image);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      \"min-height\": \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex ml-20 mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: data.image,\n        alt: \"\",\n        className: \"w-2/5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Name: \", data.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Description: \", data.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Price: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"\",\n            children: data.price + \" ETH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Owner: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm\",\n            children: data.owner\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Seller: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm\",\n            children: [data.fractionalise, \" \", data.seller, \" \", data.fractionalise]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: data.fractionalise ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Fractionalised Quantity : \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-sm\",\n              children: data.fractionaliseQty\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 55\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: data.fractionalise ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Fractionalised Price : \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-sm\",\n              children: data.fractionalisePrice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 60\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 32\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [currAddress != data.owner && currAddress != data.seller && data.fractionalise ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block text-purple-500 text-sm font-bold mb-2\",\n              htmlFor: \"name\",\n              children: \"Quantity To Buy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n              type: \"text\",\n              required: \"required\",\n              id: \"amtToSell\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 22\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 31\n          }, this), currAddress != data.owner && currAddress != data.seller ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\",\n            id: \"buy-btn\",\n            onClick: () => buyNFT(tokenId),\n            children: \"Buy this NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 25\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-emerald-700\",\n            children: \"You are the owner of this NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-red-500 text-center mt-3\",\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [!(currAddress != data.owner && currAddress != data.seller) && !data.fractionalise ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"block text-purple-500 text-sm font-bold mb-2\",\n                htmlFor: \"name\",\n                children: \"Fractions To Split\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n                type: \"text\",\n                required: \"required\",\n                id: \"count\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 26\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 26\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 32\n            }, this), !(currAddress != data.owner && currAddress != data.seller) && !data.fractionalise ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"block text-purple-500 text-sm font-bold mb-2\",\n                htmlFor: \"name\",\n                children: \"Fractional price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n                type: \"text\",\n                required: \"required\",\n                id: \"price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 26\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 26\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 32\n            }, this), !(currAddress != data.owner && currAddress != data.seller) && !data.fractionalise ? /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\",\n              id: \"frac-btn\",\n              onClick: () => fraction(tokenId),\n              children: \"Fractionalise this NFT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 24\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 35\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 9\n  }, this);\n}\n\n_s(NFTPage, \"tHfbAfnHJAVQy91bdK1UPtClOpY=\", false, function () {\n  return [useParams];\n});\n\n_c = NFTPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"NFTPage\");","map":{"version":3,"names":["Navbar","axie","useLocation","useParams","MarketplaceJSON","axios","useState","GetIpfsUrlFromPinata","NFTPage","props","data","updateData","dataFetched","updateDataFetched","message","updateMessage","currAddress","updateCurrAddress","getNFTData","tokenId","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","addr","getAddress","contract","Contract","address","abi","tokenURI","listedToken","getListedTokenForId","meta","get","console","log","item","price","seller","owner","image","name","description","fractionalise","fractionalisePrice","fnftPrice","toNumber","fractionaliseQty","amount","disableButton","btnName","listButton","document","getElementById","disabled","style","backgroundColor","opacity","enableButton","getFractionaliseContract","buyNFT","amtToSell","querySelector","value","alert","salePrice","utils","parseUnits","transaction","nftSell","wait","error","location","reload","executeSale","e","fraction","contract1","count","test","params"],"sources":["/Users/sharanya.mahesheka/Documents/new/FractionalNFT/src/components/NFTpage.js"],"sourcesContent":["import Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\n\nexport default function NFTPage (props) {\n\nconst [data, updateData] = useState({});\nconst [dataFetched, updateDataFetched] = useState(false);\nconst [message, updateMessage] = useState(\"\");\nconst [currAddress, updateCurrAddress] = useState(\"0x\");\n\nasync function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n    //create an NFT Token\n    var tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n    tokenURI = GetIpfsUrlFromPinata(tokenURI);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(\"LISTED TOKEN\");\n    console.log(listedToken);\n\n    let item = {\n        price: meta.price,\n        tokenId: tokenId,\n        seller: listedToken.seller,\n        owner: listedToken.owner,\n        image: meta.image,\n        name: meta.name,\n        description: meta.description,\n        fractionalise: listedToken.fractionalise,\n        fractionalisePrice: listedToken.fnftPrice.toNumber(),\n        fractionaliseQty: listedToken.amount.toNumber(),\n    }\n    console.log(item);\n    updateData(item);\n    updateDataFetched(true);\n    console.log(\"address\", addr)\n    updateCurrAddress(addr);\n}\n\nasync function disableButton(btnName) {\n    const listButton = document.getElementById(btnName)\n    listButton.disabled = true\n    listButton.style.backgroundColor = \"grey\";\n    listButton.style.opacity = 0.3;\n}\n\nasync function enableButton(btnName) {\n    const listButton = document.getElementById(btnName)\n    listButton.disabled = false\n    listButton.style.backgroundColor = \"#A500FF\";\n    listButton.style.opacity = 1;\n}\n\nasync function getFractionaliseContract() {\n\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n    return contract;\n  }\n\nasync function buyNFT(tokenId) {\n    if(data.fractionalise) {\n        const ethers = require(\"ethers\");\n        \n        const amtToSell = document.querySelector(\"#amtToSell\").value;\n\n        if( !amtToSell)\n        {\n            alert(\"Please fill all the fields!\")\n            return -1;\n        }\n    \n        if(amtToSell > data.fractionaliseQty) {\n            alert(\"Buy amount can't be more than the quantity\")\n            return -1;\n        }\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n\n        \n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n        updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\")\n\n\n        const salePrice = ethers.utils.parseUnits(\"0.01\", 'ether')\n        //run the executeSale function\n        try{\n            disableButton(\"buy-btn\")\n            let transaction = await contract.nftSell(tokenId, amtToSell, {value:salePrice});\n            await transaction.wait();\n            alert('You successfully bought the NFT!');\n        } catch (error) {\n            alert(error)\n        }\n        enableButton(\"buy-btn\")\n        updateMessage(\"\");\n        window.location.reload(false);\n    } else {\n        try {\n            const ethers = require(\"ethers\");\n            //After adding your Hardhat network to your metamask, this code will get providers and signers\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n    \n            //Pull the deployed contract instance\n            let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n            const salePrice = ethers.utils.parseUnits(data.price, 'ether')\n            updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\")\n            //run the executeSale function\n            let transaction = await contract.executeSale(tokenId, {value:salePrice});\n            await transaction.wait();\n    \n            alert('You successfully bought the NFT!');\n            updateMessage(\"\");\n            window.location.reload(false);\n        }\n        catch(e) {\n            alert(\"Upload Error\"+e)\n        }\n    }\n}\n\nasync function  fraction (tokenId) {\n    \n    const contract1 = await getFractionaliseContract();\n    const count = document.querySelector(\"#count\").value;\n    const price = document.querySelector(\"#price\").value;\n\n    if( !count  || !price)\n    {\n        updateMessage(\"Please fill all the fields!\")\n        return -1;\n    }\n    \n    updateMessage(\"Fractionalising the NFT... Please Wait (Upto 5 mins)\")\n    disableButton(\"frac-btn\");\n\n    try{\n        var test = await contract1.fractionalise(tokenId,count,price);\n        await test.wait();\n        alert('You successfully fractionalised the NFT!');\n    } catch (error) {\n        alert(error);\n    }\n    updateMessage(\"\");\n    enableButton(\"frac-btn\");\n    window.location.reload(false);\n}\n\n    const params = useParams();\n    const tokenId = params.tokenId;\n    if(!dataFetched)\n        getNFTData(tokenId);\n    if(typeof data.image == \"string\")\n        data.image = GetIpfsUrlFromPinata(data.image);\n\n    return(\n        <div style={{\"min-height\":\"100vh\"}}>\n            <Navbar></Navbar>\n            <div className=\"flex ml-20 mt-20\">\n                <img src={data.image} alt=\"\" className=\"w-2/5\" />\n                <div className=\"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\">\n                    <div>\n                        Name: {data.name}\n                    </div>\n                    <div>\n                        Description: {data.description}\n                    </div>\n                    <div>\n                        Price: <span className=\"\">{data.price + \" ETH\"}</span>\n                    </div>\n                    <div>\n                        Owner: <span className=\"text-sm\">{data.owner}</span>\n                    </div>\n                    <div>\n                        Seller: <span className=\"text-sm\">{data.fractionalise} {data.seller} {data.fractionalise}</span>\n                    </div>\n\n                    <div>                          \n                    { data.fractionalise?\n                        <div>\n                            Fractionalised Quantity : <span className=\"text-sm\">{data.fractionaliseQty}</span>\n                        </div>\n                        :\n                       <div></div>\n                    }\n                    </div>\n                    \n                    <div>\n                            { data.fractionalise?\n                                <div>\n                                    Fractionalised Price : <span className=\"text-sm\">{data.fractionalisePrice}</span>\n                                </div>\n                                :\n                               <div></div>\n                            }\n                            </div>\n                    <div>\n                    { currAddress != data.owner && currAddress != data.seller && data.fractionalise?\n                     <div className=\"mb-4\">\n                        <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"name\">Quantity To Buy</label>\n                        <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" type=\"text\" required=\"required\" id=\"amtToSell\"/>\n                    </div> :  <div></div>\n                    }\n\n                     { currAddress != data.owner && currAddress != data.seller ?\n                        <button className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\" id=\"buy-btn\" onClick={() => buyNFT(tokenId)}>Buy this NFT</button>\n                        : <div className=\"text-emerald-700\">You are the owner of this NFT</div>\n                    }\n                    \n                    <div className=\"text-red-500 text-center mt-3\">{message}</div>\n                    <div className=\"mb-4\">\n                     { !(currAddress != data.owner && currAddress != data.seller )&& !data.fractionalise?\n                         <div>\n                            <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"name\">Fractions To Split</label>\n                         <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" type=\"text\" required=\"required\" id=\"count\" />\n                       </div>: <div></div>\n                    }\n\n                    { !(currAddress != data.owner && currAddress != data.seller )&& !data.fractionalise?\n                         <div className=\"mb-4\">\n                        <label className=\"block text-purple-500 text-sm font-bold mb-2\" htmlFor=\"name\">Fractional price</label>\n                         <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" type=\"text\" required=\"required\" id=\"price\" />\n                       </div>: <div></div>\n                    }\n\n                    { !(currAddress != data.owner && currAddress != data.seller )&& !data.fractionalise?\n                       <button className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\" id=\"frac-btn\" onClick={() => fraction(tokenId)}>Fractionalise this NFT\n                       </button>: <div></div>\n                    }       \n                    </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}